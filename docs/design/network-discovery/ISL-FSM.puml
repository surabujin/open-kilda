Internal data:
* reference
* effective-status
* port-state-monitor
* poll-monitor
* bfd-monitor
* round-trip-monitor

* endpoint-A
* endpoint-B
* endpoint-A-up
* endpoint-B-up
* round-trip-expire-at

Input signals:
* isl-up
* isl-down
* isl-move
* BFD-up
* BFD-down
* round-trip-status

Internal(self-injected) signals
* _become_down

Output signals:
* bisl-up (notify BFD-port, notify reroute)
* bisl-down (notify reroute)
* bisl-bfd-enable
* bisl-bfd-disable
* isl-move

@startuml
title ISL FSM

[*] --> OPERATIONAL

state OPERATIONAL {
    [*] --> PENDING

    PENDING -r-> SET_UP_RESOURCES : _become_up
    PENDING --> INACTIVE : _become_down
    PENDING --> MOVED : _become_moved
    PENDING : _sync / persist discovery data

    SET_UP_RESOURCES --> ACTIVE : _setup_done
    SET_UP_RESOURCES --> INACTIVE : _become_down
    SET_UP_RESOURCES : enter / init attempts count from config
    SET_UP_RESOURCES : enter / send install isl rules for A-end
    SET_UP_RESOURCES : enter / send install isl rules for Z-end
    SET_UP_RESOURCES : isl-rule-installed [both sides are valid] / emit _setup_done
    SET_UP_RESOURCES : isl-rule-timeout [has attempts] / emit install isl rules for timeout endpoint
    SET_UP_RESOURCES : isl-rule-timeout [!has attempts] / emit _setup_done
    SET_UP_RESOURCES : _sync / persist discovery data

    ACTIVE --> INACTIVE : _become_down
    ACTIVE --> MOVED : _become_moved
    ACTIVE : enter / persist state
    ACTIVE : enter [enable_bfd in DB is set] / emit bisl-bfd-enable
    ACTIVE : exit / emit bisl-down
    ACTIVE : _sync / persist discovery data

    INACTIVE --> SET_UP_RESOURCES : _become_up
    INACTIVE -d-> MOVED : _become_moved
    INACTIVE : enter / persist state
    INACTIVE : enter / emit isl-move
    INACTIVE : enter / emit bisl-bfd-disable
    INACTIVE : _sync / persist discovery data

    MOVED --> SET_UP_RESOURCES : _become_up
    MOVED : enter / persist state
    MOVED : enter / emit isl-move
    MOVED : enter / emit bisl-bfd-disable
    MOVED : _sync / persist discovery data
}
OPERATIONAL --> CLEAN_UP_RESOURCES : isl-remove [effective_status == INACTIVE]
OPERATIONAL : enter / load persisted state
OPERATIONAL : isl-(up|down|move) / evaluate-state (can emit sync and|or _become_(up|down|moved))
OPERATIONAL : bfd-(up|down) / evaluate-state (can emit sync and|or _become_(up|down))
OPERATIONAL : round-trip-status / evaluate-state (can emit sync and|or _become_(up|down))

CLEAN_UP_RESOURCES : enter / init attempts count from config
CLEAN_UP_RESOURCES : enter / send remove isl rules for A-end endpoint
CLEAN_UP_RESOURCES : enter / send remove isl rules for Z-end endpoint
CLEAN_UP_RESOURCES : isl-rule-removed [both endpoints are valid] / emit isl-remove-finished
CLEAN_UP_RESOURCES : isl-rule-timeout [has attempts] / emit remove isl rules for timeout endpoint
CLEAN_UP_RESOURCES : isl-rule-timeout [!has attempts] / emit isl-remove-finished
CLEAN_UP_RESOURCES : isl-rule-failed [has attempts] / resend remove commands
CLEAN_UP_RESOURCES --> DELETED : isl-remove-finished

DELETED -> [*]
@enduml
