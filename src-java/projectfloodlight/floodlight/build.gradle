plugins {
    id 'base'
    id 'org.ajoberstar.grgit' version '4.0.1' apply false
}

group = 'org.projectfloodlight'
def versionTag = '1.2-kilda-4'

import org.ajoberstar.grgit.Grgit

configurations {
    'default'
    openflowj
}

dependencies {
    openflowj 'org.projectfloodlight:openflowj'
}

task cloneFloodlightRepo {
    def repo = file('floodlight')
    outputs.dir(repo)

    if (repo.exists()) {
        def grgit = Grgit.open(currentDir: repo.absolutePath)
        grgit.fetch()
        grgit.checkout(branch: versionTag)
        grgit.close()
    } else {
        def repoUri = 'https://github.com/kilda/floodlight.git'
        if (project.hasProperty("floodlightGitRepo")) {
            repoUri = project.property("floodlightGitRepo")
        }
        def grgit = Grgit.clone(dir: repo.absolutePath, uri: repoUri, refToCheckout: versionTag)
        grgit.close()
    }
}

task cleanSources(type: Exec) {
    workingDir 'floodlight'
    commandLine 'mvn', '-B', 'clean'
}
clean.dependsOn(cleanSources)

task compileMavenProject(type: Exec, dependsOn: [configurations.openflowj, cloneFloodlightRepo]) {
    inputs.file('floodlight/pom.xml')
    inputs.dir('floodlight/src')
    inputs.dir('floodlight/lib')
    outputs.file("floodlight/target/floodlight-${versionTag}.jar")
    outputs.file('floodlight/target/floodlight.jar')

    workingDir 'floodlight'
    commandLine 'mvn', '-B', 'clean', 'install', '-DskipTests'
}

task copyJar(type: Copy, dependsOn: compileMavenProject) {
    ext.destFile = file("$buildDir/libs/floodlight-${versionTag}.jar")

    from(compileMavenProject)
    into "$buildDir/libs"
}

artifacts {
    'default' file: copyJar.destFile, builtBy: copyJar
}
